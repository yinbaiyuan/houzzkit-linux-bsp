// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
/*
 * Copyright (c) 2020 Rockchip Electronics Co., Ltd.
 *
 */

/dts-v1/;

//rk3568-evb1-ddr4-v10
//#include "rk3568-evb1-ddr4-v10.dtsi"

#include "rk3568-evb-rpdzkj-rk809.dtsi"


#include "rk3568-linux.dtsi"

/*************************camera***********************/
//#include "rp-mipi-camera-gc2093-rk3568.dtsi"
#include "rp-mipi-camera-gc2093-imx334-imx415-rk3568.dtsi"
/***************************************************/


/*************************adc key***********************/
#include "rp-adc-key.dtsi"
/***************************************************/

/*************************gmac***********************/
#include "rp-gmac0-pro-rk3568.dtsi"
#include "rp-gmac1-m1-pro-rk3568.dtsi"
/***************************************************/
/***************** SINGLE LCD (LCD + HDMI) ****************/
#include "rp-box-rk3568-lcd-gpio.dtsi"	// if use lcd, must enable it
/* HDMI only */
//#include "rp-lcd-hdmi.dtsi"

/* MIPI DSI0 */
//#include "rp-lcd-mipi0-5-720-1280-v2-boxTP.dtsi"
#include "rp-lcd-mipi0-7-720-1280.dtsi"
//#include "rp-lcd-mipi0-8-800-1280-v3.dtsi"
//#include "rp-lcd-mipi0-8-1200-1920.dtsi"
//#include "rp-lcd-mipi0-10-800-1280-v3.dtsi"
//#include "rp-lcd-mipi0-10-1200-1920.dtsi"

/** LVDS */
//#include "rp-lcd-lvds-10-1024-600-raw.dtsi"
//#include "rp-lcd-lvds-7-1024-600-v2.dtsi"
//#include "rp-lcd-lvds-10-1280-800.dtsi"

/* EDP */
//#include "rp-lcd-edp-13.3-15.6-1920-1080.dtsi"
/************************ MULTILPLE LCD *********************/
/* EDP + MIPI0/lvds */
//#include "rp-lcd-triple-lvds-10-1024-600-edp-13-1920-1080-hdmi.dtsi"









/{
	model = "RPDZKJ RK3568 RP-BOX-RK3568 V10 Board";
	compatible = "rpdzkj,rp-box-rk3568", "rockchip,rk3568";


        rp_power{
                status = "okay";
                compatible = "rp_power";
                rp_not_deep_sleep = <1>;

                //#define GPIO_FUNCTION_OUTPUT 0
                //#define GPIO_FUNCTION_INPUT 1
                //#define GPIO_FUNCTION_IRQ 2
                //#define GPIO_FUNCTION_FLASH 3
                //#define GPIO_FUNCTION_OUTPUT_CTRL 4
                
                /**
                 * gpioxxx {                    // the node name will display on /proc/rp_power, you can define any character string
                 *      gpio_num = <>;          // gpio you want ot control
                 *      gpio_function = <>;     // function of current gpio, refer to above define.
                 * };
                 */
                   
                
                pwr_5v_3v3 {       //vdd5v vdd3v3 en
                        gpio_num = <&gpio3 RK_PB5 GPIO_ACTIVE_HIGH>;
                        gpio_function = <0>;
                };
                pwr_4g {	    //vdd_3G 3.3v enable
                        gpio_num = <&gpio0 RK_PC2 GPIO_ACTIVE_HIGH>;
                        gpio_function = <4>;
                };
                led {	//system led
                        gpio_num = <&gpio3 RK_PA7 GPIO_ACTIVE_HIGH>;
                        gpio_function = <4>;
                };
                usb_pwr {       //usb power
                        gpio_num = <&gpio2 RK_PD5 GPIO_ACTIVE_HIGH>;
                        gpio_function = <4>;
                };
                hub_rst {       //hub reset
                        gpio_num = <&gpio2 RK_PD7 GPIO_ACTIVE_HIGH>;
                        gpio_function = <4>;
                };
                fan {	//fan
                        gpio_num = <&gpio3 RK_PB6 GPIO_ACTIVE_HIGH>;
                        gpio_function = <4>;
                };
                otg_mode {       //OTG SWITCH, high is mean otg_id to 0, force host mode
                        gpio_num = <&gpio2 RK_PD6 GPIO_ACTIVE_LOW>;
                        gpio_function = <4>;
                };
                otg_power {       //usb otg power
                        gpio_num = <&gpio2 RK_PD4 GPIO_ACTIVE_HIGH>;
                        gpio_function = <4>;
                };

                spk_en {       //spk enable
                        gpio_num = <&gpio3 RK_PA6 GPIO_ACTIVE_HIGH>;
                        gpio_function = <4>;
                };
                spk_mute {       //spk mute
                        gpio_num = <&gpio3 RK_PA3 GPIO_ACTIVE_LOW>;
                        gpio_function = <4>;
                };
				};

        rp_gpio{
                status = "okay";
                compatible = "rp_gpio";
                
                /**
                 * gpioxxx {                    // the node name will display on /proc/rp_gpio, you can define any character string
                 *      gpio_num = <>;          // gpio you want ot control
                 *      gpio_function = <>;     // function of current gpio£º 0 output, 1 input, 3 blink
                 *      gpio_event = <KEY_F14>; // optional property used to define gpio report event such as KEY_F14, only works in case of gpio_function = <1>;
                 *    };
                 */
                                   
                
                /****** GPIO, place you want to control as below
                 * gpio_name {
                 *       gpio_num = <&gpio3 RK_PA6 GPIO_ACTIVE_HIGH>;
                 *       gpio_function = <4>;
                 * };
                 */

        };

};


&pmu_io_domains {
        status = "okay";
        pmuio2-supply = <&vcc3v3_pmu>;
        vccio1-supply = <&vccio_acodec>;
        vccio3-supply = <&vccio_sd>;
        vccio4-supply = <&vcc_1v8>;
        vccio5-supply = <&vcc_3v3>;
        vccio6-supply = <&vcc_1v8>;
        vccio7-supply = <&vcc_3v3>;
};


&gmac0 {
        status = "okay";
        tx_delay = <0x3a>;
        rx_delay = <0x2e>;
        snps,reset-gpio = <&gpio2 RK_PD3 GPIO_ACTIVE_LOW>;
        //max-speed = <100>;  /* set eth maximal speed, default automatically adapt */
};
&gmac1 {
        status = "okay";
        tx_delay = <0x42>;
        rx_delay = <0x27>;
        snps,reset-gpio = <&gpio2 RK_PD1 GPIO_ACTIVE_LOW>;
};

&i2c1 {
	status = "okay";
};


&i2c3 {
	status = "okay";
};


&i2c5 {
	status = "okay";
        rtc@51 {
                status = "okay";
                compatible = "rtc,hym8563";
                reg = <0x51>;
        };
};


&uart0 {
	status = "okay";
};

&uart3 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart3m1_xfer>;
};

&uart4 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart4m1_xfer>;
};

&uart7 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart7m1_xfer>;
};

&uart8 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart8m0_xfer &uart8m0_ctsn>;
};

&uart9 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart9m1_xfer>;
};


&spi0 {
	status = "okay";

    spi0_dev@0 {
        compatible = "rockchip,spidev";
        reg = <0>;
        spi-max-frequency = <12000000>;
        spi-lsb-first;
    };

};

&spi1 {
        status = "disabled";
};


/******** must be close,if not system no run ******/
&dmc {
       status = "disabled";
};

&dfi {
       status = "disabled";
};
/*********************************************/


&pwm7 {
        status = "disabled";
};

/*************************wifi bt***********************/
&wireless_wlan {
	pinctrl-names = "default";
	pinctrl-0 = <&wifi_host_wake_irq>;
	WIFI,host_wake_irq = <&gpio3 RK_PD4 GPIO_ACTIVE_HIGH>;
};

&wireless_bluetooth {
	BT,reset_gpio    = <&gpio4 RK_PC4 GPIO_ACTIVE_HIGH>;
	BT,wake_gpio     = <&gpio4 RK_PB4 GPIO_ACTIVE_HIGH>;
  	BT,wake_host_irq = <&gpio4 RK_PB5 GPIO_ACTIVE_HIGH>;
	status = "okay";
};

/******************************************************/


&rk_headset {
	pinctrl-names = "default";
	pinctrl-0 = <&hp_det>;
	headset_gpio = <&gpio4 RK_PC2 GPIO_ACTIVE_HIGH>;
};




/****** rp3568 camera configuration adjustment ******/
&vcc_camera {
        pinctrl-0 = <&camera_pwr>;
        gpio = <&gpio3 RK_PC1 GPIO_ACTIVE_HIGH>;
};
&gc2093 {
        pwdn-gpios = <&gpio3 RK_PC3 GPIO_ACTIVE_HIGH>;
        reset-gpios = <&gpio4 RK_PC3 GPIO_ACTIVE_LOW>;
};
&imx334{
     pwdn-gpios = <&gpio3 RK_PC3 GPIO_ACTIVE_HIGH>;
     reset-gpios = <&gpio4 RK_PC3 GPIO_ACTIVE_HIGH>;
};

&imx415{
     pwdn-gpios = <&gpio3 RK_PC3 GPIO_ACTIVE_HIGH>;
     reset-gpios = <&gpio4 RK_PC3 GPIO_ACTIVE_LOW>;
};


&edp {
    /** delete hdp gpio that rp-box-rk3568 donot use */
    /delete-property/ hpd-gpios;
};

&pinctrl {
	wireless-wlan {
		wifi_host_wake_irq: wifi-host-wake-irq {
			rockchip,pins = <3 RK_PD4 RK_FUNC_GPIO &pcfg_pull_down>;
		};
	};

	wireless-bluetooth {
		uart8_gpios: uart8-gpios {
			rockchip,pins = <2 RK_PB1 RK_FUNC_GPIO &pcfg_pull_none>;
		};
	};	
	headphone {
		hp_det: hp-det {
			rockchip,pins = <4 RK_PC2 RK_FUNC_GPIO &pcfg_pull_down>;
		};
	};
        cam {
                camera_pwr: camera-pwr {
                        rockchip,pins =
                                /* camera power en */
                                <3 RK_PC1 RK_FUNC_GPIO &pcfg_pull_none>;
                };
        };
        rp_pin {
                otg_5ven: otg-5ven {
                        rockchip,pins =
                                /* otg port host power en */
                                <2 RK_PD4 RK_FUNC_GPIO &pcfg_pull_none>;
                };
                host_5ven: host-5ven {
                        rockchip,pins =
                                /* usb host power en */
                                <2 RK_PD5 RK_FUNC_GPIO &pcfg_pull_none>;
                };
                vdd3g_en: vdd3g-en {
                        rockchip,pins =
                                /* 4G module power en */
                                <0 RK_PC2 RK_FUNC_GPIO &pcfg_pull_none>;
                };
        };
};

&rk809_sound {
        /delete-property/ simple-audio-card,hp-det-gpio;
        /delete-property/ simple-audio-card,widgets;
};
